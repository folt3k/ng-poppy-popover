import { Injectable } from '@angular/core';
import { PopoverContentComponent } from '../components/popover-content/popover-content.component';
import { ActivePopover } from '../models/popover-active.model';
import { LayerAppendOptions } from '../../layer/layer.model';
import * as i0 from "@angular/core";
import * as i1 from "../../layer/layer.service";
import * as i2 from "./events.service";
export class PopoverService {
    constructor(layerService, eventsService) {
        this.layerService = layerService;
        this.eventsService = eventsService;
        this.activePopovers = [];
    }
    append(injector, directive, options, parentPopoverRef) {
        const existedPopover = this.activePopovers.find((popover) => popover.directiveRef === directive);
        if (options.closeOnTriggerAgain && existedPopover) {
            this.remove(existedPopover.popoverRef);
            return existedPopover.popoverRef;
        }
        else {
            return this.appendToBody(injector, directive, options, parentPopoverRef);
        }
    }
    remove(popoverRef) {
        const active = this.activePopovers.find((p) => p.popoverRef === popoverRef);
        if (active) {
            if (active.directiveRef) {
                active.directiveRef.popoverComponentRef = null;
                active.directiveRef.afterClose.emit();
            }
            active.popoverRef.destroy();
            this.layerService.removeFromBody(active.popoverRef);
            this.eventsService.unregister('click-outside', active);
            this.eventsService.unregister('capture-scroll', active);
            this.eventsService.unregister('resize', active);
            this.activePopovers = this.activePopovers.filter((a) => a.popoverRef !== popoverRef);
        }
    }
    removeByNativeElementRef(element) {
        const activePopover = this.activePopovers.find((active) => active.popoverRef.location.nativeElement === element);
        if (activePopover) {
            this.remove(activePopover.popoverRef);
        }
    }
    getActive(popoverRef) {
        return this.activePopovers.find((active) => active.popoverRef === popoverRef);
    }
    isPopoverSubmenuExits(precendingRef, parentRef) {
        const precendingActivePopover = this.getActive(precendingRef);
        if (!precendingActivePopover || (precendingActivePopover && !precendingActivePopover.deepLevel)) {
            return false;
        }
        return !!this.activePopovers.find((popover) => popover.parentPopoverRef === parentRef && popover.deepLevel === precendingActivePopover.deepLevel + 1);
    }
    removeAllNestedPopovers(popoverRef) {
        const activePopover = this.getActive(popoverRef);
        if (activePopover) {
            this.activePopovers
                .filter((popover) => popover.deepLevel > activePopover.deepLevel)
                .forEach((popover) => {
                this.remove(popover.popoverRef);
            });
        }
    }
    removeMenu(componentRef) {
        this.activePopovers
            .filter((popover) => popover.parentPopoverRef === componentRef || popover.popoverRef === componentRef)
            .forEach((popover) => {
            this.remove(popover.popoverRef);
        });
    }
    subscribeToClickOutsideEventForParentPopover(componentRef) {
        const currentPopover = this.getActive(componentRef);
        if (currentPopover) {
            const parentPopover = this.activePopovers.find((popover) => popover.superParentPopoverRef === currentPopover.superParentPopoverRef &&
                popover.deepLevel === currentPopover.deepLevel - 1);
            if (parentPopover) {
                setTimeout(() => {
                    this.eventsService.subscribe('click-outside', parentPopover);
                });
            }
        }
    }
    appendToBody(injector, directive, options, parentPopoverRef) {
        const layerOptions = new LayerAppendOptions({ delayClose: options.delayClose });
        const popover = this.layerService.appendToBody(PopoverContentComponent, layerOptions, injector);
        const { superparent, deepLevel } = this.prepareSuperparentAndDeepLevel(popover, parentPopoverRef, directive);
        const newPopover = new ActivePopover(popover, parentPopoverRef, superparent, directive, options.type, deepLevel);
        popover.instance.componentRef = popover;
        popover.instance.parentPopoverRef = popover;
        popover.changeDetectorRef.detectChanges();
        this.activePopovers.push(newPopover);
        if (newPopover.directiveRef) {
            newPopover.directiveRef.afterShow.emit();
        }
        if (this.canRegisterScrollCaptureEvent(newPopover, options)) {
            this.registerScrollCaptureEvent(newPopover, options);
        }
        if (this.canRegisterResizeEvent(newPopover, options)) {
            this.registerResizeEvent(newPopover, options);
        }
        return popover;
    }
    prepareSuperparentAndDeepLevel(popover, parentPopover, directive) {
        let deepLevel = 0;
        let superparent = null;
        if (directive) {
            const parentPopover = this.activePopovers.find((p) => {
                return p.popoverRef.instance.element.nativeElement.contains(directive.hostElement.nativeElement);
            });
            if (!parentPopover) {
                superparent = popover;
                deepLevel = 0;
            }
            else {
                superparent = parentPopover.superParentPopoverRef || parentPopover.popoverRef;
                deepLevel = parentPopover.deepLevel + 1;
            }
        }
        else {
            const closestParent = this.activePopovers.find((p) => p.popoverRef === parentPopover);
            if (closestParent) {
                const popoverGroup = this.activePopovers.filter((p) => p.superParentPopoverRef === closestParent.superParentPopoverRef);
                superparent = closestParent.superParentPopoverRef;
                deepLevel = popoverGroup[popoverGroup.length - 1].deepLevel + 1;
            }
        }
        return {
            deepLevel,
            superparent,
        };
    }
    canRegisterScrollCaptureEvent(popover, options) {
        const { triggeredBy, type, closeOnScroll } = options;
        return (popover.directiveRef &&
            popover.deepLevel === 0 &&
            triggeredBy !== 'hover' &&
            type !== 'submenu' &&
            closeOnScroll);
    }
    canRegisterResizeEvent(popover, options) {
        const { triggeredBy, type } = options;
        return popover.directiveRef && popover.deepLevel === 0 && triggeredBy !== 'hover' && type !== 'submenu';
    }
    registerResizeEvent(popover, options) {
        this.eventsService.register('resize', popover, () => {
            if (options.type === 'context') {
                this.hideGroup(popover);
            }
            else {
                this.updateGroupPosition(popover);
            }
        });
    }
    registerScrollCaptureEvent(popover, options) {
        this.eventsService.register('capture-scroll', popover, (event) => {
            const captured = popover.directiveRef.hostElement.nativeElement === event.target ||
                event.target.contains(popover.directiveRef.hostElement.nativeElement);
            if ((captured && options.hideOnScroll) || options.type === 'context') {
                this.hideGroup(popover);
            }
            if (captured && !options.hideOnScroll && options.type !== 'context') {
                this.updateGroupPosition(popover);
            }
        });
    }
    hideGroup(popover) {
        this.activePopovers.forEach((active) => {
            if (active.superParentPopoverRef === popover.superParentPopoverRef) {
                this.remove(active.popoverRef);
            }
        });
    }
    updateGroupPosition(popover) {
        this.activePopovers
            .filter((active) => active.superParentPopoverRef === popover.popoverRef)
            .forEach((active) => {
            if (active.popoverRef.instance.componentStyles) {
                active.popoverRef.instance.componentStyles.update();
            }
        });
    }
}
PopoverService.ɵfac = function PopoverService_Factory(t) { return new (t || PopoverService)(i0.ɵɵinject(i1.LayerService), i0.ɵɵinject(i2.PopoverEventsService)); };
PopoverService.ɵprov = i0.ɵɵdefineInjectable({ token: PopoverService, factory: PopoverService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(PopoverService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return [{ type: i1.LayerService }, { type: i2.PopoverEventsService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,