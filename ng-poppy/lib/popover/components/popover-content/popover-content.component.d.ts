import { AfterViewInit, ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, ElementRef, NgZone, OnDestroy, TemplateRef } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { PopoverConfig } from '../../popover.token';
import { PopoverService } from '../../services/popover.service';
import { PopoverStyles } from '../../models/popover-styles.model';
import { PopoverEventsService } from '../../services/events.service';
import * as i0 from "@angular/core";
export declare class PopoverContentComponent implements OnDestroy, AfterViewInit {
    readonly element: ElementRef;
    private readonly ngZone;
    private readonly componentFactoryResolver;
    private readonly popoverService;
    private readonly popoverEventsService;
    private readonly cdr;
    readonly popoverConfig: PopoverConfig;
    popoverWrapperEl: ElementRef;
    componentRef: ComponentRef<PopoverContentComponent>;
    parentPopoverRef: ComponentRef<PopoverContentComponent>;
    animationState: 'open' | 'close';
    componentStyles: PopoverStyles;
    private subMenuComponentRef;
    private animationEnd$;
    private menuItemsChanged;
    private destroy$;
    constructor(element: ElementRef, ngZone: NgZone, componentFactoryResolver: ComponentFactoryResolver, popoverService: PopoverService, popoverEventsService: PopoverEventsService, cdr: ChangeDetectorRef, popoverConfig: PopoverConfig);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    get template(): TemplateRef<any>;
    animationEnd(event: AnimationEvent): void;
    private applyStyles;
    private onClickMenuItem;
    private onHoverMenuItem;
    private listenForClickOutside;
    private listenForMouseEventOnHost;
    private listenForMenuItemTriggers;
    private close;
    private createSubpopover;
    private isMenu;
    private canListenForClickOutside;
    private detectChanges;
    static ɵfac: i0.ɵɵFactoryDef<PopoverContentComponent, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<PopoverContentComponent, "poppy-content", never, {}, {}, never, never>;
}
