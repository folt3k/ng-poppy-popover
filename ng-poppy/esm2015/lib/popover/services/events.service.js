import { Injectable } from '@angular/core';
import { merge, fromEvent } from 'rxjs';
import { tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class PopoverEventsService {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.registeredEvents = [];
    }
    register(type, activePopover, callback) {
        let sub;
        this.ngZone.runOutsideAngular(() => {
            const obs = this.getEventObservable(type);
            sub = obs.subscribe((event) => {
                callback(event);
            });
        });
        this.registeredEvents.push({ popover: activePopover, type, sub, callback });
    }
    unregister(type, activePopover) {
        this.registeredEvents
            .filter((event) => event.type === type)
            .forEach((event) => {
            if (event.popover === activePopover) {
                event.sub.unsubscribe();
            }
        });
        this.registeredEvents = this.registeredEvents.filter((event) => event.type === type ? event.popover !== activePopover : true);
    }
    subscribe(type, popover) {
        const obs = this.getEventObservable(type);
        this.registeredEvents
            .filter((event) => { var _a; return event.type === type && event.popover === popover && ((_a = event.sub) === null || _a === void 0 ? void 0 : _a.closed); })
            .forEach((event) => {
            event.sub = obs.subscribe((e) => event.callback(e));
        });
    }
    unsubscribe(type, popover) {
        this.registeredEvents
            .filter((event) => event.type === type && event.popover === popover)
            .forEach((event) => {
            event.sub.unsubscribe();
        });
    }
    getEventObservable(type) {
        switch (type) {
            case 'click-outside':
                return merge(fromEvent(document, 'click'), fromEvent(document, 'contextmenu'))
                    .pipe();
            case 'capture-scroll':
                return fromEvent(document, 'scroll').pipe(tap(() => {
                    // console.log('Capturing scroll event..');
                }));
            case 'resize':
                return fromEvent(window, 'resize').pipe(tap(() => {
                    // console.log('Resize event..');
                }));
        }
    }
}
PopoverEventsService.ɵfac = function PopoverEventsService_Factory(t) { return new (t || PopoverEventsService)(i0.ɵɵinject(i0.NgZone)); };
PopoverEventsService.ɵprov = i0.ɵɵdefineInjectable({ token: PopoverEventsService, factory: PopoverEventsService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(PopoverEventsService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: i0.NgZone }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvZm9sdGkvUHJvamVjdHMvbmctcG9wcHkvcHJvamVjdHMvbmctcG9wcHkvc3JjLyIsInNvdXJjZXMiOlsibGliL3BvcG92ZXIvc2VydmljZXMvZXZlbnRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQTRCLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFbEUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQVlyQyxNQUFNLE9BQU8sb0JBQW9CO0lBRy9CLFlBQW9CLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRjFCLHFCQUFnQixHQUE2QixFQUFFLENBQUM7SUFFbkIsQ0FBQztJQUV0QyxRQUFRLENBQ04sSUFBc0IsRUFDdEIsYUFBNEIsRUFDNUIsUUFBc0M7UUFFdEMsSUFBSSxHQUFpQixDQUFDO1FBRXRCLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2pDLE1BQU0sR0FBRyxHQUFzQixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0QsR0FBRyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDNUIsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFzQixFQUFFLGFBQTRCO1FBQzdELElBQUksQ0FBQyxnQkFBZ0I7YUFDbEIsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQzthQUN0QyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNqQixJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssYUFBYSxFQUFFO2dCQUNuQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQ3pCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQzdELEtBQUssQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUM3RCxDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFzQixFQUFFLE9BQXNCO1FBQ3RELE1BQU0sR0FBRyxHQUFzQixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFN0QsSUFBSSxDQUFDLGdCQUFnQjthQUNsQixNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxXQUFDLE9BQUEsS0FBSyxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxPQUFPLFdBQUksS0FBSyxDQUFDLEdBQUcsMENBQUUsTUFBTSxDQUFBLENBQUEsRUFBQSxDQUFDO2FBQ3hGLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ2pCLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFzQixFQUFFLE9BQXNCO1FBQ3hELElBQUksQ0FBQyxnQkFBZ0I7YUFDbEIsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQzthQUNuRSxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNqQixLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLGtCQUFrQixDQUFDLElBQXNCO1FBQy9DLFFBQVEsSUFBSSxFQUFFO1lBQ1osS0FBSyxlQUFlO2dCQUNsQixPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7cUJBQzNFLElBQUksRUFFSCxDQUFDO1lBQ1AsS0FBSyxnQkFBZ0I7Z0JBQ25CLE9BQU8sU0FBUyxDQUFhLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQ25ELEdBQUcsQ0FBQyxHQUFHLEVBQUU7b0JBQ1AsMkNBQTJDO2dCQUM3QyxDQUFDLENBQUMsQ0FDSCxDQUFDO1lBQ0osS0FBSyxRQUFRO2dCQUNYLE9BQU8sU0FBUyxDQUFhLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQ2pELEdBQUcsQ0FBQyxHQUFHLEVBQUU7b0JBQ1AsaUNBQWlDO2dCQUNuQyxDQUFDLENBQUMsQ0FDSCxDQUFDO1NBQ0w7SUFDSCxDQUFDOzt3RkF6RVUsb0JBQW9COzREQUFwQixvQkFBb0IsV0FBcEIsb0JBQW9CLG1CQURQLE1BQU07a0RBQ25CLG9CQUFvQjtjQURoQyxVQUFVO2VBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJUG9wb3ZlckV2ZW50U2VydmljZSB9IGZyb20gJy4uL3BvcG92ZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgT2JzZXJ2YWJsZSwgbWVyZ2UsIGZyb21FdmVudCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWN0aXZlUG9wb3ZlciB9IGZyb20gJy4uL21vZGVscy9wb3BvdmVyLWFjdGl2ZS5tb2RlbCc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCB0eXBlIFBvcG92ZXJFdmVudFR5cGUgPSAnY2xpY2stb3V0c2lkZScgfCAncmVzaXplJyB8ICdjYXB0dXJlLXNjcm9sbCc7XG5cbmludGVyZmFjZSBQb3BvdmVyUmVnaXN0ZXJlZEV2ZW50IHtcbiAgc3ViOiBTdWJzY3JpcHRpb247XG4gIHBvcG92ZXI6IEFjdGl2ZVBvcG92ZXI7XG4gIHR5cGU6IFBvcG92ZXJFdmVudFR5cGU7XG4gIGNhbGxiYWNrPzogKGFyZ3M/KSA9PiB2b2lkIHwgYW55O1xufVxuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFBvcG92ZXJFdmVudHNTZXJ2aWNlIGltcGxlbWVudHMgSVBvcG92ZXJFdmVudFNlcnZpY2Uge1xuICBwcml2YXRlIHJlZ2lzdGVyZWRFdmVudHM6IFBvcG92ZXJSZWdpc3RlcmVkRXZlbnRbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHt9XG5cbiAgcmVnaXN0ZXIoXG4gICAgdHlwZTogUG9wb3ZlckV2ZW50VHlwZSxcbiAgICBhY3RpdmVQb3BvdmVyOiBBY3RpdmVQb3BvdmVyLFxuICAgIGNhbGxiYWNrOiAoZXZlbnQ6IEV2ZW50KSA9PiB2b2lkIHwgYW55XG4gICk6IHZvaWQge1xuICAgIGxldCBzdWI6IFN1YnNjcmlwdGlvbjtcblxuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGNvbnN0IG9iczogT2JzZXJ2YWJsZTxFdmVudD4gPSB0aGlzLmdldEV2ZW50T2JzZXJ2YWJsZSh0eXBlKTtcbiAgICAgIHN1YiA9IG9icy5zdWJzY3JpYmUoKGV2ZW50KSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZWdpc3RlcmVkRXZlbnRzLnB1c2goeyBwb3BvdmVyOiBhY3RpdmVQb3BvdmVyLCB0eXBlLCBzdWIsIGNhbGxiYWNrIH0pO1xuICB9XG5cbiAgdW5yZWdpc3Rlcih0eXBlOiBQb3BvdmVyRXZlbnRUeXBlLCBhY3RpdmVQb3BvdmVyOiBBY3RpdmVQb3BvdmVyKTogdm9pZCB7XG4gICAgdGhpcy5yZWdpc3RlcmVkRXZlbnRzXG4gICAgICAuZmlsdGVyKChldmVudCkgPT4gZXZlbnQudHlwZSA9PT0gdHlwZSlcbiAgICAgIC5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQucG9wb3ZlciA9PT0gYWN0aXZlUG9wb3Zlcikge1xuICAgICAgICAgIGV2ZW50LnN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB0aGlzLnJlZ2lzdGVyZWRFdmVudHMgPSB0aGlzLnJlZ2lzdGVyZWRFdmVudHMuZmlsdGVyKChldmVudCkgPT5cbiAgICAgIGV2ZW50LnR5cGUgPT09IHR5cGUgPyBldmVudC5wb3BvdmVyICE9PSBhY3RpdmVQb3BvdmVyIDogdHJ1ZVxuICAgICk7XG4gIH1cblxuICBzdWJzY3JpYmUodHlwZTogUG9wb3ZlckV2ZW50VHlwZSwgcG9wb3ZlcjogQWN0aXZlUG9wb3Zlcik6IHZvaWQge1xuICAgIGNvbnN0IG9iczogT2JzZXJ2YWJsZTxFdmVudD4gPSB0aGlzLmdldEV2ZW50T2JzZXJ2YWJsZSh0eXBlKTtcblxuICAgIHRoaXMucmVnaXN0ZXJlZEV2ZW50c1xuICAgICAgLmZpbHRlcigoZXZlbnQpID0+IGV2ZW50LnR5cGUgPT09IHR5cGUgJiYgZXZlbnQucG9wb3ZlciA9PT0gcG9wb3ZlciAmJiBldmVudC5zdWI/LmNsb3NlZClcbiAgICAgIC5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5zdWIgPSBvYnMuc3Vic2NyaWJlKChlKSA9PiBldmVudC5jYWxsYmFjayhlKSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHVuc3Vic2NyaWJlKHR5cGU6IFBvcG92ZXJFdmVudFR5cGUsIHBvcG92ZXI6IEFjdGl2ZVBvcG92ZXIpOiB2b2lkIHtcbiAgICB0aGlzLnJlZ2lzdGVyZWRFdmVudHNcbiAgICAgIC5maWx0ZXIoKGV2ZW50KSA9PiBldmVudC50eXBlID09PSB0eXBlICYmIGV2ZW50LnBvcG92ZXIgPT09IHBvcG92ZXIpXG4gICAgICAuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQuc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RXZlbnRPYnNlcnZhYmxlKHR5cGU6IFBvcG92ZXJFdmVudFR5cGUpOiBPYnNlcnZhYmxlPEV2ZW50PiB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdjbGljay1vdXRzaWRlJzpcbiAgICAgICAgcmV0dXJuIG1lcmdlKGZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyksIGZyb21FdmVudChkb2N1bWVudCwgJ2NvbnRleHRtZW51JykpXG4gICAgICAgICAgLnBpcGVcbiAgICAgICAgICAvLyB0YXAoKCkgPT4gY29uc29sZS5sb2coJ2xpc3RlbiBmb3IgY2xpY2sgb3V0c2lkZS4uJykpXG4gICAgICAgICAgKCk7XG4gICAgICBjYXNlICdjYXB0dXJlLXNjcm9sbCc6XG4gICAgICAgIHJldHVybiBmcm9tRXZlbnQ8TW91c2VFdmVudD4oZG9jdW1lbnQsICdzY3JvbGwnKS5waXBlKFxuICAgICAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQ2FwdHVyaW5nIHNjcm9sbCBldmVudC4uJyk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgJ3Jlc2l6ZSc6XG4gICAgICAgIHJldHVybiBmcm9tRXZlbnQ8TW91c2VFdmVudD4od2luZG93LCAncmVzaXplJykucGlwZShcbiAgICAgICAgICB0YXAoKCkgPT4ge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1Jlc2l6ZSBldmVudC4uJyk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==